ME333
Sean Morton
Homework 4

Chapter 3, prob. 4,5
Chapter 4, prob. 1,2,4

-Demo videos for 3.5, 4.4 in the Demonstration assignment
_________________

3.4. Modify simplePIC.c so that both lights are on or off at the same time, instead of opposite
each other. Turn in only the code that changed.

  LATFbits.LATF0 = 1;    // Turn LED1 on and LED2 on.  These pins sink current
  LATFbits.LATF1 = 1;    // on the NU32, so "high" (1) = "off" and "low" (0) = "on"

3.5. Modify simplePIC.c so that the function delay takes an int cycles as an argument. The
for loop in delay executes cycles times, not a fixed value of 1,000,000. Then modify main
so that the first time it calls delay, it passes a value equal to MAXCYCLES. The next time it
calls delay with a value decreased by DELTACYCLES,2 and so on, until the value is less than
zero, at which time it resets the value to MAXCYCLES. Use #define to define the constants
MAXCYCLES as 1,000,000 and DELTACYCLES as 100,000. Turn in your code.

	See attached file simplePIC.c

_________________

4.1. Identify which functions, constants, and global variables in NU32.c are private to NU32.c
and which are meant to be used in other C files.

	Functions in NU32.c you're meant to use in other C files:
		NU32_Startup()
		NU32_ReadUART3()
		NU32_WriteUART3()
	 
	Functions used in NU32.c that are private, to be used only in NU32.c's public functions:
		__builtin_disable_interrupts();
		__builtin_mtc0(_CP0_CONFIG, _CP0_CONFIG_SELECT, 0xa4210583); 
		__builtin_enable_interrupts();
	 
	Global variables/preprocessor commands private to NU32.c:
		#define NU32_DESIRED_BAUD 230400    // Baudrate for RS232
		...plus 19 "#pragma config" commands for Device Configuration Registers
		
	Global variables/preprocessor commands to be used in other .c files:
		#define NU32_LED1 LATFbits.LATF0    // LED1 on the NU32 board
		#define NU32_LED2 LATFbits.LATF1    // LED2 on the NU32 board
		#define NU32_USER PORTDbits.RD7     // USER button on the NU32 board
		#define NU32_SYS_FREQ 80000000ul    // 80 million Hz

4.2. You will create your own libraries.
	a. Remove the comments from invest.c in Appendix A. Now modify it to work on the
	NU32 using the NU32 library. You will need to replace all instances of printf and
	scanf with appropriate combinations of sprintf, sscanf, NU32_ReadUART3 and
	NU32_WriteUART3. Verify that you can provide data to the PIC32 with your keyboard
	and display the results on your computer screen. Turn in your code for all the files,
	with comments where you altered the input and output statements.
	
	See attached file investA.c

	b. Split invest.c into two C files, main.c and helper.c, and one header file, helper.h.
	helper.c contains all functions other than main. Which constants, function prototypes,
	data type definitions, etc., should go in each file? Build your project and verify that it
	works. For the safety of future helper library users, put an include guard in helper.h.
	Turn in your code and a separate paragraph justifying your choice for where to put the
	various definitions.
	
	See ZIP folder investB.zip

	Justification for what each file contains:
	 - helper.c: definitions for each helper function described by helper.h.
	 - helper.h:
		- #define MAX_YEARS 100. Needs to be used in the struct definition
			for the Investment type, plus users can easily edit it here
		- struct definition for Investment type. This struct needs to be used
			in both helper.c and main.c so a header file is the right place for it
		- declarations of each helper function. It's appropriate to put the 
			declarations of functions into the .h file and the definitions into
			the corresponding .c file of the same name.
	- main.c: just the main() function; encourages the user to go to the header file
		to access constants, functions, and type definitions

	c. Break invest.c into three files: main.c, io.c, and calculate.c. Any function which
	handles input or output should be in io.c. Think about which prototypes, data types,
	etc., are needed for each C file and come up with a good choice of a set of header files
	and how to include them. Again, for safety, use include guards in your header files.
	Verify that your code works. Turn in your code and a separate paragraph justifying
	your choice of header files.
		
	See ZIP folder investC.zip
	
	Justification for choice of header files:
	 - calculate.h and io.h are needed so we can include their corresponding
		.c files in the project
	 - an extra helper file investment.h is used to define the "Investment" 
		datatype. The user can manipulate the value of MAX_YEARS within this file.
		This is included in io.h and calculate.h.


4.4. Write a function, void LCD_ClearLine(int ln), that clears a single line of the LCD (either
line zero or line one). You can clear a line by writing enough space (’ ’) characters to
fill it.

	See ZIP folder lcd_functions.zip

	Functions from LCD.c we need in order to write LCD_ClearLine():
	 - LCD_Setup()
	 - LCD_Move(int row, int col)
	 - LCD_WriteString(const char *string)